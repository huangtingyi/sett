/* Result Sets Interface */
#ifndef SQL_CRSR
#define SQL_CRSR
struct sql_cursor{
	unsigned int curocn;
	void *ptr1;
	void *ptr2;
	unsigned int magic;
};
typedef struct sql_cursor sql_cursor;
typedef struct sql_cursor SQL_CURSOR;
#endif /* SQL_CRSR */

/* Thread Safety */
typedef void * sql_context;
typedef void * SQL_CONTEXT;

/* Object support */
struct sqltvn{
	unsigned char *tvnvsn; 
	unsigned short tvnvsnl; 
	unsigned char *tvnnm;
	unsigned short tvnnml; 
	unsigned char *tvnsnm;
	unsigned short tvnsnml;
};

typedef struct sqltvn sqltvn;

struct sqladts{
	unsigned int adtvsn; 
	unsigned short adtmode; 
	unsigned short adtnum;  
	sqltvn adttvn[1];       
};
typedef struct sqladts sqladts;

/* Binding to PL/SQL Records */
struct sqltdss{

	unsigned int tdsvsn; 
	unsigned short tdsnum; 
	unsigned char *tdsval[1]; 
};
typedef struct sqltdss sqltdss;

/* File name & Package Name */
struct sqlcxp
{
	unsigned short fillen;
	char  filnam[7];
};
struct sqlexd {
#ifndef	MAX_SQLEXD_ARR_SIZE
#define	MAX_SQLEXD_ARR_SIZE 100
#endif
	unsigned int   sqlvsn;
	unsigned int   arrsiz;
	unsigned int   iters;
	unsigned int   offset;
	unsigned short selerr;
	unsigned short sqlety;
	unsigned int   occurs;
	short 		*cud;
	unsigned char  *sqlest;
	char  		*stmt;
	sqladts 	*sqladtp;
	sqltdss 	*sqltdsp;
	void  		**sqphsv;
	unsigned int   *sqphsl;
	int   		*sqphss;
	void  		**sqpind;
	int   		*sqpins;
	unsigned int   *sqparm;
	unsigned int   **sqparc;
	unsigned short  *sqpadto;
	unsigned short  *sqptdso;
	unsigned int   sqlcmax;
	unsigned int   sqlcmin;
	unsigned int   sqlcincr;
	unsigned int   sqlctimeout;
	unsigned int   sqlcnowait;
	int   		sqfoff;
	unsigned int   sqcmod;
	unsigned int   sqfmod;
	
	void  		*sqhstv[MAX_SQLEXD_ARR_SIZE];
	unsigned int    sqhstl[MAX_SQLEXD_ARR_SIZE];
	int   		sqhsts[MAX_SQLEXD_ARR_SIZE];
	void  		*sqindv[MAX_SQLEXD_ARR_SIZE];
	int   		sqinds[MAX_SQLEXD_ARR_SIZE];
	unsigned int    sqharm[MAX_SQLEXD_ARR_SIZE];
	unsigned int   *sqharc[MAX_SQLEXD_ARR_SIZE];
	unsigned short  sqadto[MAX_SQLEXD_ARR_SIZE];
	unsigned short  sqtdso[MAX_SQLEXD_ARR_SIZE];
};
struct	sqlcud_row_var
{
	short	n1;
	short	vtype;
	short	n2;
	short	n3;
};
struct sqlcud_row
{
	short	offset;
	short	noused1;
	short	noused2;
	short	curind;
	short	noused3;
	short	noused4;
	short	oper;
	short	magic;
	short	noused5;
	short	noused6;
	short	varnum;
	short	innum;
	short	noused7;
	short	noused8;
	short 	noused9;
	struct	sqlcud_row_var vt[1];
};

/* SQLLIB Prototypes */
extern sqlcxt (/*_ void **, unsigned int *,
                   struct sqlexd *, struct sqlcxp * _*/);
extern sqlcx2t(/*_ void **, unsigned int *,
                   struct sqlexd *, struct sqlcxp * _*/);
extern sqlbuft(/*_ void **, char * _*/);
extern sqlgs2t(/*_ void **, char * _*/);
extern sqlorat(/*_ void **, unsigned int *, void * _*/);
extern void sqliem(/*_ char *, int * _*/);

/* Forms Interface */
/*static int IAPSUCC = 0;
static int IAPFAIL = 1403;
static int IAPFTL  = 535;
*/
typedef struct { unsigned short len; unsigned char arr[1]; } VARCHAR;
typedef struct { unsigned short len; unsigned char arr[1]; } varchar;

/* CUD (Compilation Unit Data) Array */



static short sqlcud0[] =
{12,4130,1,0,0,
5,0,0,1,0,0,17,49,0,0,1,1,0,1,0,1,97,0,0,
24,0,0,1,0,0,21,53,0,0,25,25,0,1,0,1,3,0,0,1,3,0,0,1,3,0,0,1,3,0,0,1,97,0,0,1,
97,0,0,1,97,0,0,1,97,0,0,1,97,0,0,1,3,0,0,1,3,0,0,1,3,0,0,1,3,0,0,1,3,0,0,1,3,
0,0,1,3,0,0,1,3,0,0,1,3,0,0,1,3,0,0,1,97,0,0,1,97,0,0,1,97,0,0,1,97,0,0,1,97,0,
0,1,97,0,0,
};
static struct sqladts sqladt = {
  1,1,0,
};
static struct sqltdss sqltds =
{
  1,
  0,
};
static struct sqlcxp sqlfpn =
{
    11,
    "upd_test.pc"
};

static unsigned int sqlctx = 167563;
static short sqlcud1[1000];

#include <wwlog.h>
#include <wwtiny.h>
#include <wwdb.h>

#include <stt_ticket.h>

int EUpdateStructToUSttTicket1(struct USttTicketStruct *p,
	int iUpdateFlag,struct USttTicketStructUp *pTarget)
{

	int  iCurPos=pTarget->iCurPos;
	char *sTableName=pTarget->sTableName;


	if(iUpdateFlag!=TRUE){

/*放置数据到静态缓冲*/
		pTarget->aiTicketTypeID[iCurPos]=		p->iTicketTypeID;
		pTarget->aiRoamFee[iCurPos]=			p->iRoamFee;
		pTarget->aiTollFee[iCurPos]=			p->iTollFee;
		pTarget->aiAddFee[iCurPos]=			p->iAddFee;

		strcpy(pTarget->asHomeAreaCode[iCurPos],	p->sHomeAreaCode);
		strcpy(pTarget->asVisitAreaCode[iCurPos],	p->sVisitAreaCode);
		strcpy(pTarget->asCalledCode[iCurPos],		p->sCalledCode);
		strcpy(pTarget->asRoamType[iCurPos],		p->sRoamType);
		strcpy(pTarget->asDistanceType[iCurPos],	p->sDistanceType);

		pTarget->aiTrunkInTypeID[iCurPos]=		p->iTrunkInTypeID;
		pTarget->aiTrunkOutTypeID[iCurPos]=		p->iTrunkOutTypeID;
		pTarget->aiTrunkInCarrierID[iCurPos]=		p->iTrunkInCarrierID;
		pTarget->aiTrunkOutCarrierID[iCurPos]=		p->iTrunkOutCarrierID;
		pTarget->aiCallingTypeID[iCurPos]=		p->iCallingTypeID;
		pTarget->aiCalledTypeID[iCurPos]=		p->iCalledTypeID;
		pTarget->aiCallingCarrierID[iCurPos]=		p->iCallingCarrierID;
		pTarget->aiCalledCarrierID[iCurPos]=		p->iCalledCarrierID;
		pTarget->aiCallingAreaID[iCurPos]=		p->iCallingAreaID;
		pTarget->aiCalledAreaID[iCurPos]=		p->iCalledAreaID;

		strcpy(pTarget->asSplitRuleID[iCurPos],		p->sSplitRuleID);
		strcpy(pTarget->asTrunkIn[iCurPos],		p->sTrunkIn);
		strcpy(pTarget->asTrunkOut[iCurPos],		p->sTrunkOut);
		strcpy(pTarget->asBillMode[iCurPos],		p->sBillMode);
		strcpy(pTarget->asState[iCurPos],		p->sState);
		strcpy(pTarget->asRowID[iCurPos],		p->sRowID);

		strcpy(pTarget->asMsisdn[iCurPos],		p->sMsisdn);
		strcpy(pTarget->asStartTime[iCurPos],		p->sStartTime);
		pTarget->aiDuration[iCurPos]=			p->iDuration;


		iCurPos++;
	}

	if(iUpdateFlag==TRUE||iCurPos==STT_TICKET_BUFLEN_UP){

/* INSERT */
		char statement[4096];

		if(iCurPos==0) return 0;

		sprintf(statement,"\n\
			UPDATE %s\n\
			SET \n\
				TICKET_TYPE_ID=		:aiTicketTypeID,\n\
				ROAM_FEE=               :aiRoamFee,\n\
				TOLL_FEE=               :aiTollFee,\n\
				ADD_FEE=                :aiAddFee,\n\
				HOME_AREA_CODE=         :asHomeAreaCode,\n\
				VISIT_AREA_CODE=        :asVisitAreaCode,\n\
				CALLED_CODE=            :asCalledCode,\n\
				ROAM_TYPE=              :asRoamType,\n\
				DISTANCE_TYPE=          :asDistanceType,\n\
				TRUNK_IN_TYPE_ID=       :aiTrunkInTypeID,\n\
				TRUNK_OUT_TYPE_ID=      :aiTrunkOutTypeID,\n\
				TRUNK_IN_CARRIER_ID=    :aiTrunkInCarrierID,\n\
				TRUNK_OUT_CARRIER_ID=   :aiTrunkOutCarrierID,\n\
				CALLING_TYPE_ID=        :aiCallingTypeID,\n\
				CALLED_TYPE_ID=         :aiCalledTypeID,\n\
				CALLING_CARRIER_ID=     :aiCallingCarrierID,\n\
				CALLED_CARRIER_ID=      :aiCalledCarrierID,\n\
				CALLING_AREA_ID=        :aiCallingAreaID,\n\
				CALLED_AREA_ID=         :aiCalledAreaID,\n\
				SPLIT_RULE_ID=          :asSplitRuleID,\n\
				TRUNK_IN=               :asTrunkIn,\n\
				TRUNK_OUT=     	        :asTrunkOut,\n\
				BILL_MODE=		:asBillMode,\n\
				STATE=			:asState,\n\
				UPDATE_DATE=		SYSDATE\n\
			WHERE \n\
				ROWID = chartorowid(:asRowID)\n\
			",sTableName);

		/* EXEC SQL PREPARE RSTT_TICKETUCR FROM :statement; */ 

{
  struct sqlexd sqlstm;
  sqlstm.sqlvsn = 12;
  sqlstm.arrsiz = 1;
  sqlstm.sqladtp = &sqladt;
  sqlstm.sqltdsp = &sqltds;
  sqlstm.stmt = "";
  sqlstm.iters = (unsigned int  )1;
  sqlstm.offset = (unsigned int  )5;
  sqlstm.cud = sqlcud0;
  sqlstm.sqlest = (unsigned char  *)&sqlca;
  sqlstm.sqlety = (unsigned short)256;
  sqlstm.occurs = (unsigned int  )0;
  sqlstm.sqhstv[0] = (         void  *)statement;
  sqlstm.sqhstl[0] = (unsigned int  )4096;
  sqlstm.sqhsts[0] = (         int  )0;
  sqlstm.sqindv[0] = (         void  *)0;
  sqlstm.sqinds[0] = (         int  )0;
  sqlstm.sqharm[0] = (unsigned int  )0;
  sqlstm.sqadto[0] = (unsigned short )0;
  sqlstm.sqtdso[0] = (unsigned short )0;
  sqlstm.sqphsv = sqlstm.sqhstv;
  sqlstm.sqphsl = sqlstm.sqhstl;
  sqlstm.sqphss = sqlstm.sqhsts;
  sqlstm.sqpind = sqlstm.sqindv;
  sqlstm.sqpins = sqlstm.sqinds;
  sqlstm.sqparm = sqlstm.sqharm;
  sqlstm.sqparc = sqlstm.sqharc;
  sqlstm.sqpadto = sqlstm.sqadto;
  sqlstm.sqptdso = sqlstm.sqtdso;
  sqlcxt((void **)0, &sqlctx, &sqlstm, &sqlfpn);
}


		if(CheckSqlResult("Prepare update statement STT_TICKET")<0)
			return -1;

		/* EXEC SQL FOR :iCurPos EXECUTE RSTT_TICKETUCR USING
				:pTarget->aiTicketTypeID,
				:pTarget->aiRoamFee,
				:pTarget->aiTollFee,
				:pTarget->aiAddFee,
				:pTarget->asHomeAreaCode,
				:pTarget->asVisitAreaCode,
				:pTarget->asCalledCode,
				:pTarget->asRoamType,
				:pTarget->asDistanceType,
				:pTarget->aiTrunkInTypeID,
				:pTarget->aiTrunkOutTypeID,
				:pTarget->aiTrunkInCarrierID,
				:pTarget->aiTrunkOutCarrierID,
				:pTarget->aiCallingTypeID,
				:pTarget->aiCalledTypeID,
				:pTarget->aiCallingCarrierID,
				:pTarget->aiCalledCarrierID,
				:pTarget->aiCallingAreaID,
				:pTarget->aiCalledAreaID,
				:pTarget->asSplitRuleID,
				:pTarget->asTrunkIn,
				:pTarget->asTrunkOut,
				:pTarget->asBillMode,
				:pTarget->asState,
				:pTarget->asRowID; */ 

{
  struct sqlexd sqlstm;
  sqlstm.sqlvsn = 12;
  sqlstm.arrsiz = 25;
  sqlstm.sqladtp = &sqladt;
  sqlstm.sqltdsp = &sqltds;
  sqlstm.stmt = "";
  sqlstm.iters = (unsigned int  )iCurPos;
  sqlstm.offset = (unsigned int  )24;
  sqlstm.cud = sqlcud0;
  sqlstm.sqlest = (unsigned char  *)&sqlca;
  sqlstm.sqlety = (unsigned short)256;
  sqlstm.occurs = (unsigned int  )0;
  sqlstm.sqhstv[0] = (         void  *)(pTarget->aiTicketTypeID);
  sqlstm.sqhstl[0] = (unsigned int  )sizeof(int);
  sqlstm.sqhsts[0] = (         int  )sizeof(int);
  sqlstm.sqindv[0] = (         void  *)0;
  sqlstm.sqinds[0] = (         int  )0;
  sqlstm.sqharm[0] = (unsigned int  )0;
  sqlstm.sqharc[0] = (unsigned int   *)0;
  sqlstm.sqadto[0] = (unsigned short )0;
  sqlstm.sqtdso[0] = (unsigned short )0;
  sqlstm.sqhstv[1] = (         void  *)(pTarget->aiRoamFee);
  sqlstm.sqhstl[1] = (unsigned int  )sizeof(int);
  sqlstm.sqhsts[1] = (         int  )sizeof(int);
  sqlstm.sqindv[1] = (         void  *)0;
  sqlstm.sqinds[1] = (         int  )0;
  sqlstm.sqharm[1] = (unsigned int  )0;
  sqlstm.sqharc[1] = (unsigned int   *)0;
  sqlstm.sqadto[1] = (unsigned short )0;
  sqlstm.sqtdso[1] = (unsigned short )0;
  sqlstm.sqhstv[2] = (         void  *)(pTarget->aiTollFee);
  sqlstm.sqhstl[2] = (unsigned int  )sizeof(int);
  sqlstm.sqhsts[2] = (         int  )sizeof(int);
  sqlstm.sqindv[2] = (         void  *)0;
  sqlstm.sqinds[2] = (         int  )0;
  sqlstm.sqharm[2] = (unsigned int  )0;
  sqlstm.sqharc[2] = (unsigned int   *)0;
  sqlstm.sqadto[2] = (unsigned short )0;
  sqlstm.sqtdso[2] = (unsigned short )0;
  sqlstm.sqhstv[3] = (         void  *)(pTarget->aiAddFee);
  sqlstm.sqhstl[3] = (unsigned int  )sizeof(int);
  sqlstm.sqhsts[3] = (         int  )sizeof(int);
  sqlstm.sqindv[3] = (         void  *)0;
  sqlstm.sqinds[3] = (         int  )0;
  sqlstm.sqharm[3] = (unsigned int  )0;
  sqlstm.sqharc[3] = (unsigned int   *)0;
  sqlstm.sqadto[3] = (unsigned short )0;
  sqlstm.sqtdso[3] = (unsigned short )0;
  sqlstm.sqhstv[4] = (         void  *)(pTarget->asHomeAreaCode);
  sqlstm.sqhstl[4] = (unsigned int  )6;
  sqlstm.sqhsts[4] = (         int  )6;
  sqlstm.sqindv[4] = (         void  *)0;
  sqlstm.sqinds[4] = (         int  )0;
  sqlstm.sqharm[4] = (unsigned int  )0;
  sqlstm.sqharc[4] = (unsigned int   *)0;
  sqlstm.sqadto[4] = (unsigned short )0;
  sqlstm.sqtdso[4] = (unsigned short )0;
  sqlstm.sqhstv[5] = (         void  *)(pTarget->asVisitAreaCode);
  sqlstm.sqhstl[5] = (unsigned int  )6;
  sqlstm.sqhsts[5] = (         int  )6;
  sqlstm.sqindv[5] = (         void  *)0;
  sqlstm.sqinds[5] = (         int  )0;
  sqlstm.sqharm[5] = (unsigned int  )0;
  sqlstm.sqharc[5] = (unsigned int   *)0;
  sqlstm.sqadto[5] = (unsigned short )0;
  sqlstm.sqtdso[5] = (unsigned short )0;
  sqlstm.sqhstv[6] = (         void  *)(pTarget->asCalledCode);
  sqlstm.sqhstl[6] = (unsigned int  )6;
  sqlstm.sqhsts[6] = (         int  )6;
  sqlstm.sqindv[6] = (         void  *)0;
  sqlstm.sqinds[6] = (         int  )0;
  sqlstm.sqharm[6] = (unsigned int  )0;
  sqlstm.sqharc[6] = (unsigned int   *)0;
  sqlstm.sqadto[6] = (unsigned short )0;
  sqlstm.sqtdso[6] = (unsigned short )0;
  sqlstm.sqhstv[7] = (         void  *)(pTarget->asRoamType);
  sqlstm.sqhstl[7] = (unsigned int  )2;
  sqlstm.sqhsts[7] = (         int  )2;
  sqlstm.sqindv[7] = (         void  *)0;
  sqlstm.sqinds[7] = (         int  )0;
  sqlstm.sqharm[7] = (unsigned int  )0;
  sqlstm.sqharc[7] = (unsigned int   *)0;
  sqlstm.sqadto[7] = (unsigned short )0;
  sqlstm.sqtdso[7] = (unsigned short )0;
  sqlstm.sqhstv[8] = (         void  *)(pTarget->asDistanceType);
  sqlstm.sqhstl[8] = (unsigned int  )2;
  sqlstm.sqhsts[8] = (         int  )2;
  sqlstm.sqindv[8] = (         void  *)0;
  sqlstm.sqinds[8] = (         int  )0;
  sqlstm.sqharm[8] = (unsigned int  )0;
  sqlstm.sqharc[8] = (unsigned int   *)0;
  sqlstm.sqadto[8] = (unsigned short )0;
  sqlstm.sqtdso[8] = (unsigned short )0;
  sqlstm.sqhstv[9] = (         void  *)(pTarget->aiTrunkInTypeID);
  sqlstm.sqhstl[9] = (unsigned int  )sizeof(int);
  sqlstm.sqhsts[9] = (         int  )sizeof(int);
  sqlstm.sqindv[9] = (         void  *)0;
  sqlstm.sqinds[9] = (         int  )0;
  sqlstm.sqharm[9] = (unsigned int  )0;
  sqlstm.sqharc[9] = (unsigned int   *)0;
  sqlstm.sqadto[9] = (unsigned short )0;
  sqlstm.sqtdso[9] = (unsigned short )0;
  sqlstm.sqhstv[10] = (         void  *)(pTarget->aiTrunkOutTypeID);
  sqlstm.sqhstl[10] = (unsigned int  )sizeof(int);
  sqlstm.sqhsts[10] = (         int  )sizeof(int);
  sqlstm.sqindv[10] = (         void  *)0;
  sqlstm.sqinds[10] = (         int  )0;
  sqlstm.sqharm[10] = (unsigned int  )0;
  sqlstm.sqharc[10] = (unsigned int   *)0;
  sqlstm.sqadto[10] = (unsigned short )0;
  sqlstm.sqtdso[10] = (unsigned short )0;
  sqlstm.sqhstv[11] = (         void  *)(pTarget->aiTrunkInCarrierID);
  sqlstm.sqhstl[11] = (unsigned int  )sizeof(int);
  sqlstm.sqhsts[11] = (         int  )sizeof(int);
  sqlstm.sqindv[11] = (         void  *)0;
  sqlstm.sqinds[11] = (         int  )0;
  sqlstm.sqharm[11] = (unsigned int  )0;
  sqlstm.sqharc[11] = (unsigned int   *)0;
  sqlstm.sqadto[11] = (unsigned short )0;
  sqlstm.sqtdso[11] = (unsigned short )0;
  sqlstm.sqhstv[12] = (         void  *)(pTarget->aiTrunkOutCarrierID);
  sqlstm.sqhstl[12] = (unsigned int  )sizeof(int);
  sqlstm.sqhsts[12] = (         int  )sizeof(int);
  sqlstm.sqindv[12] = (         void  *)0;
  sqlstm.sqinds[12] = (         int  )0;
  sqlstm.sqharm[12] = (unsigned int  )0;
  sqlstm.sqharc[12] = (unsigned int   *)0;
  sqlstm.sqadto[12] = (unsigned short )0;
  sqlstm.sqtdso[12] = (unsigned short )0;
  sqlstm.sqhstv[13] = (         void  *)(pTarget->aiCallingTypeID);
  sqlstm.sqhstl[13] = (unsigned int  )sizeof(int);
  sqlstm.sqhsts[13] = (         int  )sizeof(int);
  sqlstm.sqindv[13] = (         void  *)0;
  sqlstm.sqinds[13] = (         int  )0;
  sqlstm.sqharm[13] = (unsigned int  )0;
  sqlstm.sqharc[13] = (unsigned int   *)0;
  sqlstm.sqadto[13] = (unsigned short )0;
  sqlstm.sqtdso[13] = (unsigned short )0;
  sqlstm.sqhstv[14] = (         void  *)(pTarget->aiCalledTypeID);
  sqlstm.sqhstl[14] = (unsigned int  )sizeof(int);
  sqlstm.sqhsts[14] = (         int  )sizeof(int);
  sqlstm.sqindv[14] = (         void  *)0;
  sqlstm.sqinds[14] = (         int  )0;
  sqlstm.sqharm[14] = (unsigned int  )0;
  sqlstm.sqharc[14] = (unsigned int   *)0;
  sqlstm.sqadto[14] = (unsigned short )0;
  sqlstm.sqtdso[14] = (unsigned short )0;
  sqlstm.sqhstv[15] = (         void  *)(pTarget->aiCallingCarrierID);
  sqlstm.sqhstl[15] = (unsigned int  )sizeof(int);
  sqlstm.sqhsts[15] = (         int  )sizeof(int);
  sqlstm.sqindv[15] = (         void  *)0;
  sqlstm.sqinds[15] = (         int  )0;
  sqlstm.sqharm[15] = (unsigned int  )0;
  sqlstm.sqharc[15] = (unsigned int   *)0;
  sqlstm.sqadto[15] = (unsigned short )0;
  sqlstm.sqtdso[15] = (unsigned short )0;
  sqlstm.sqhstv[16] = (         void  *)(pTarget->aiCalledCarrierID);
  sqlstm.sqhstl[16] = (unsigned int  )sizeof(int);
  sqlstm.sqhsts[16] = (         int  )sizeof(int);
  sqlstm.sqindv[16] = (         void  *)0;
  sqlstm.sqinds[16] = (         int  )0;
  sqlstm.sqharm[16] = (unsigned int  )0;
  sqlstm.sqharc[16] = (unsigned int   *)0;
  sqlstm.sqadto[16] = (unsigned short )0;
  sqlstm.sqtdso[16] = (unsigned short )0;
  sqlstm.sqhstv[17] = (         void  *)(pTarget->aiCallingAreaID);
  sqlstm.sqhstl[17] = (unsigned int  )sizeof(int);
  sqlstm.sqhsts[17] = (         int  )sizeof(int);
  sqlstm.sqindv[17] = (         void  *)0;
  sqlstm.sqinds[17] = (         int  )0;
  sqlstm.sqharm[17] = (unsigned int  )0;
  sqlstm.sqharc[17] = (unsigned int   *)0;
  sqlstm.sqadto[17] = (unsigned short )0;
  sqlstm.sqtdso[17] = (unsigned short )0;
  sqlstm.sqhstv[18] = (         void  *)(pTarget->aiCalledAreaID);
  sqlstm.sqhstl[18] = (unsigned int  )sizeof(int);
  sqlstm.sqhsts[18] = (         int  )sizeof(int);
  sqlstm.sqindv[18] = (         void  *)0;
  sqlstm.sqinds[18] = (         int  )0;
  sqlstm.sqharm[18] = (unsigned int  )0;
  sqlstm.sqharc[18] = (unsigned int   *)0;
  sqlstm.sqadto[18] = (unsigned short )0;
  sqlstm.sqtdso[18] = (unsigned short )0;
  sqlstm.sqhstv[19] = (         void  *)(pTarget->asSplitRuleID);
  sqlstm.sqhstl[19] = (unsigned int  )5;
  sqlstm.sqhsts[19] = (         int  )5;
  sqlstm.sqindv[19] = (         void  *)0;
  sqlstm.sqinds[19] = (         int  )0;
  sqlstm.sqharm[19] = (unsigned int  )0;
  sqlstm.sqharc[19] = (unsigned int   *)0;
  sqlstm.sqadto[19] = (unsigned short )0;
  sqlstm.sqtdso[19] = (unsigned short )0;
  sqlstm.sqhstv[20] = (         void  *)(pTarget->asTrunkIn);
  sqlstm.sqhstl[20] = (unsigned int  )8;
  sqlstm.sqhsts[20] = (         int  )8;
  sqlstm.sqindv[20] = (         void  *)0;
  sqlstm.sqinds[20] = (         int  )0;
  sqlstm.sqharm[20] = (unsigned int  )0;
  sqlstm.sqharc[20] = (unsigned int   *)0;
  sqlstm.sqadto[20] = (unsigned short )0;
  sqlstm.sqtdso[20] = (unsigned short )0;
  sqlstm.sqhstv[21] = (         void  *)(pTarget->asTrunkOut);
  sqlstm.sqhstl[21] = (unsigned int  )8;
  sqlstm.sqhsts[21] = (         int  )8;
  sqlstm.sqindv[21] = (         void  *)0;
  sqlstm.sqinds[21] = (         int  )0;
  sqlstm.sqharm[21] = (unsigned int  )0;
  sqlstm.sqharc[21] = (unsigned int   *)0;
  sqlstm.sqadto[21] = (unsigned short )0;
  sqlstm.sqtdso[21] = (unsigned short )0;
  sqlstm.sqhstv[22] = (         void  *)(pTarget->asBillMode);
  sqlstm.sqhstl[22] = (unsigned int  )4;
  sqlstm.sqhsts[22] = (         int  )4;
  sqlstm.sqindv[22] = (         void  *)0;
  sqlstm.sqinds[22] = (         int  )0;
  sqlstm.sqharm[22] = (unsigned int  )0;
  sqlstm.sqharc[22] = (unsigned int   *)0;
  sqlstm.sqadto[22] = (unsigned short )0;
  sqlstm.sqtdso[22] = (unsigned short )0;
  sqlstm.sqhstv[23] = (         void  *)(pTarget->asState);
  sqlstm.sqhstl[23] = (unsigned int  )2;
  sqlstm.sqhsts[23] = (         int  )2;
  sqlstm.sqindv[23] = (         void  *)0;
  sqlstm.sqinds[23] = (         int  )0;
  sqlstm.sqharm[23] = (unsigned int  )0;
  sqlstm.sqharc[23] = (unsigned int   *)0;
  sqlstm.sqadto[23] = (unsigned short )0;
  sqlstm.sqtdso[23] = (unsigned short )0;
  sqlstm.sqhstv[24] = (         void  *)(pTarget->asRowID);
  sqlstm.sqhstl[24] = (unsigned int  )19;
  sqlstm.sqhsts[24] = (         int  )19;
  sqlstm.sqindv[24] = (         void  *)0;
  sqlstm.sqinds[24] = (         int  )0;
  sqlstm.sqharm[24] = (unsigned int  )0;
  sqlstm.sqharc[24] = (unsigned int   *)0;
  sqlstm.sqadto[24] = (unsigned short )0;
  sqlstm.sqtdso[24] = (unsigned short )0;
  sqlstm.sqphsv = sqlstm.sqhstv;
  sqlstm.sqphsl = sqlstm.sqhstl;
  sqlstm.sqphss = sqlstm.sqhsts;
  sqlstm.sqpind = sqlstm.sqindv;
  sqlstm.sqpins = sqlstm.sqinds;
  sqlstm.sqparm = sqlstm.sqharm;
  sqlstm.sqparc = sqlstm.sqharc;
  sqlstm.sqpadto = sqlstm.sqadto;
  sqlstm.sqptdso = sqlstm.sqtdso;
  sqlcxt((void **)0, &sqlctx, &sqlstm, &sqlfpn);
}


		if(CheckSqlResult("Dyn update STT_TICKET")<0) return -1;

		iCurPos=0;
	}

	pTarget->iCurPos=iCurPos;
	return 0;
}
